services:
  init-backend-volumes:
    image: 'debian:12.8-slim'
    profiles: [ backend, all ]
    user: '0:0' 
    # No network is needed to initialize named volumes
    network_mode: none
    volumes:
      - local-backend-1:/var/.local-1
      - local-backend-2:/var/.local-2
      - local-backend-3:/var/.local-3
    entrypoint: 'bash'
    command:
      - '-c'
      # Beware that docker-compose also performs variable interpolation.
      # So we need to escape the dollar sign with $$name so that bash
      # will recieve our embedded script with $name. 
      - |
        set -eux ;

        for VOL in '/var/.local-1' '/var/.local-2' '/var/.local-3' ;
        do
          chmod a+rwx $$VOL

          for SUBDIR in home venv ;
          do
            [ -d $$VOL/$$SUBDIR ] || mkdir $$VOL/$$SUBDIR
            chown 1000:1000 $$VOL/$$SUBDIR
          done
          # ls -la $$VOL
        done
        # ls -la /var ;
    restart: 'no'

  init-backend-volumes-cpu:
    image: 'debian:12.8-slim'
    profiles: [ backend-cpu, all-cpu ]
    user: '0:0' 
    # No network is needed to initialize named volumes
    network_mode: none
    volumes:
      - local-backend-cpu-1:/var/.local-1
      - local-backend-cpu-2:/var/.local-2
      - local-backend-cpu-3:/var/.local-3
    entrypoint: 'bash'
    command:
      - '-c'
      # Beware that docker-compose also performs variable interpolation.
      # So we need to escape the dollar sign with $$name so that bash
      # will recieve our embedded script with $name. 
      - |
        set -eux ;

        for VOL in '/var/.local-1' '/var/.local-2' '/var/.local-3' ;
        do
          chmod a+rwx $$VOL

          for SUBDIR in home venv ;
          do
            [ -d $$VOL/$$SUBDIR ] || mkdir $$VOL/$$SUBDIR
            chmod a+rwx $$VOL/$$SUBDIR
            chown 1000:1000 $$VOL/$$SUBDIR
          done
          ls -la $$VOL
        done
        # ls -la /var ;
    restart: 'no'


  fastapi-dev-server-common:
    image: ''
    profiles: [ never-use-directly ]

    environment:
      # Only environment variables that are important to a Docker environment
      # will be configured here. The reason is that changes to environment variables
      # configured here do require a restart before they take effect:
      # application-centric ones should be designed to avoiid a Docker container restart.
      #
      # The Python bytecode cache should be moved away from the bind-mount because
      # there is no need for it shared with the host.
      - PYTHONPYCACHEPREFIX=/app/.local/pycache
    ports: # use if it is necessary to expose the container to the host machine
      - '8100:8100'
    user: '1000:1000'
    networks:
      agent-poc:
        aliases:
          - fastapi-dev-server
    entrypoint: [ 'bash', '/custom-docker-entrypoint.sh' ]
    command: [ '/run_fastapi_dev_server.sh' ]
    deploy:
      resources:
        limits:
          memory: 4G # Give enough to run local model


  fastapi-dev-server:
    extends:
      service: fastapi-dev-server-common

    image: 'localdomain-backend:python-3.12-cuda12'
    profiles: [ backend, all ]
    environment:
      - GPU_MODE=cuda12
    volumes:
      # Mount the project directory to /app in the container
      - { type: bind, source: ., target: /app }
      # Mount important scripts into the container when we are
      # avoiding rebuilding images to capture their latest version.
      - { type: bind, source: ./run_fastapi_dev_server.sh, target: /run_fastapi_dev_server.sh }
      - { type: bind, source: ./docker/custom-docker-entrypoint.sh, target: /custom-docker-entrypoint.sh }
      # Mounting a local area to use container-installed dependencies
      - type: volume
        source: local-backend-1
        target: /home/python
        volume: { subpath: home }  # copy original home dir files
      - type: volume
        source: local-backend-1
        target: /app/.venv
        volume: { nocopy: true, subpath: venv }
    depends_on:
      - init-backend-volumes
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]


  fastapi-dev-server-cpu:
    extends:
      service: fastapi-dev-server-common

    image: 'localdomain-backend:python-3.12-cpu'
    profiles: [ backend-cpu, all-cpu ]
    environment:
      - GPU_MODE=cpu
    volumes:
      # Mount the project directory to /app in the container
      - { type: bind, source: ., target: /app }
      # Mount important scripts into the container when we are
      # avoiding rebuilding images to capture their latest version.
      - { type: bind, source: ./run_fastapi_dev_server.sh, target: /run_fastapi_dev_server.sh }
      - { type: bind, source: ./docker/custom-docker-entrypoint.sh, target: /custom-docker-entrypoint.sh }
      # Mounting a local area to use container-installed dependencies
      - type: volume
        source: local-backend-cpu-1
        target: /home/python
        volume: { subpath: home }  # copy original home dir files
      - type: volume
        source: local-backend-cpu-1
        target: /app/.venv
        volume: { nocopy: true, subpath: venv }
    depends_on:
      - init-backend-volumes-cpu


  celery-worker-common:
    image: ''
    profiles: [ never-use-directly ]

    environment:
      # Only environment variables that are important to a Docker environment
      # will be configured here. The reason is that changes to environment variables
      # configured here do require a restart before they take effect:
      # application-centric ones should be designed to avoiid a Docker container restart.
      #
      # The Python bytecode cache should be moved away from the bind-mount because
      # there is no need for it shared with the host.
      - PYTHONPYCACHEPREFIX=/app/.local/pycache
    ports: # use if it is necessary to expose the container to the host machine
      - '8101:8101'
    networks:
      agent-poc:
        aliases:
          - celery-worker
    user: '1000:1000'
    entrypoint: [ 'bash', '/custom-docker-entrypoint.sh' ]
    command: [ '/run_celery_worker.sh' ]
    deploy:
      resources:
        limits:
          memory: 8G # Give enough to run Tesseract and local model


  celery-worker:
    extends:
      service: celery-worker-common

    image: 'localdomain-backend:python-3.12-cuda12'
    profiles: [ backend, all ]
    environment:
      - GPU_MODE=cuda12
    volumes:
      # Mount the project directory to /app in the container
      - { type: bind, source: ., target: /app }
      # Mount important scripts into the container when we are
      # avoiding rebuilding images to capture their latest version.
      - { type: bind, source: ./run_fastapi_dev_server.sh, target: /run_fastapi_dev_server.sh }
      - { type: bind, source: ./docker/custom-docker-entrypoint.sh, target: /custom-docker-entrypoint.sh }
      # Mounting a local area to use container-installed dependencies
      - type: volume
        source: local-backend-2
        target: /home/python
        volume: { subpath: home }  # copy original home dir files
      - type: volume
        source: local-backend-2
        target: /app/.venv
        volume: { nocopy: true, subpath: venv }
    depends_on:
      - init-backend-volumes
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]


  celery-worker-cpu:
    extends:
      service: celery-worker-common

    image: 'localdomain-backend:python-3.12-cpu'
    profiles: [ backend-cpu, all-cpu ]
    environment:
      - GPU_MODE=cpu
    volumes:
      # Mount the project directory to /app in the container
      - { type: bind, source: ., target: /app }
      # Mount important scripts into the container when we are
      # avoiding rebuilding images to capture their latest version.
      - { type: bind, source: ./run_fastapi_dev_server.sh, target: /run_fastapi_dev_server.sh }
      - { type: bind, source: ./docker/custom-docker-entrypoint.sh, target: /custom-docker-entrypoint.sh }
      # Mounting a local area to use container-installed dependencies
      - type: volume
        source: local-backend-cpu-2
        target: /home/python
        volume: { subpath: home }  # copy original home dir files
      - type: volume
        source: local-backend-cpu-2
        target: /app/.venv
        volume: { nocopy: true, subpath: venv }
    depends_on:
      - init-backend-volumes-cpu


  celery-flower-common:
    image: ''
    profiles: [ never-use-directly ]

    environment:
      # Only environment variables that are important to a Docker environment
      # will be configured here. The reason is that changes to environment variables
      # configured here do require a restart before they take effect:
      # application-centric ones should be designed to avoiid a Docker container restart.
      #
      # The Python bytecode cache should be moved away from the bind-mount because
      # there is no need for it shared with the host.
      - PYTHONPYCACHEPREFIX=/app/.local/pycache
    ports: # use if it is necessary to expose the container to the host machine
      - '15555:5555'
    networks:
      agent-poc:
        aliases:
          - celery-flower
    user: '1000:1000'
    entrypoint: [ 'bash', '/custom-docker-entrypoint.sh' ]
    command: [ '/run_celery_flower.sh' ]
          
  celery-flower:
    extends:
      service: celery-flower-common

    image: 'localdomain-backend:python-3.12-cuda12'
    profiles: [ backend, all ]
    environment:
      - GPU_MODE=cuda12
    volumes:
      # Mount the project directory to /app in the container
      - { type: bind, source: ., target: /app }
      # Mount important scripts into the container when we are
      # avoiding rebuilding images to capture their latest version.
      - { type: bind, source: ./run_fastapi_dev_server.sh, target: /run_fastapi_dev_server.sh }
      - { type: bind, source: ./docker/custom-docker-entrypoint.sh, target: /custom-docker-entrypoint.sh }
      # Mounting a local area to use container-installed dependencies
      - type: volume
        source: local-backend-3
        target: /home/python
        volume: { subpath: home }  # copy original home dir files
      - type: volume
        source: local-backend-3
        target: /app/.venv
        volume: { nocopy: true, subpath: venv }
    depends_on:
      - init-backend-volumes
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  celery-flower-cpu:
    extends:
      service: celery-flower-common

    image: 'localdomain-backend:python-3.12-cpu'
    profiles: [ backend-cpu, all-cpu ]
    environment:
      - GPU_MODE=cpu
    volumes:
      # Mount the project directory to /app in the container
      - { type: bind, source: ., target: /app }
      # Mount important scripts into the container when we are
      # avoiding rebuilding images to capture their latest version.
      - { type: bind, source: ./run_fastapi_dev_server.sh, target: /run_fastapi_dev_server.sh }
      - { type: bind, source: ./docker/custom-docker-entrypoint.sh, target: /custom-docker-entrypoint.sh }
      # Mounting a local area to use container-installed dependencies
      - type: volume
        source: local-backend-cpu-3
        target: /home/python
        volume: { subpath: home }  # copy original home dir files
      - type: volume
        source: local-backend-cpu-3
        target: /app/.venv
        volume: { nocopy: true, subpath: venv }
    depends_on:
      - init-backend-volumes-cpu

#
# Named volumes are not created until the dependent service
# is started.
#
volumes:
  local-backend-1:
    driver: local
  local-backend-2:
    driver: local
  local-backend-3:
    driver: local
  #
  # CPU only
  #
  local-backend-cpu-1:
    driver: local
  local-backend-cpu-2:
    driver: local
  local-backend-cpu-3:
    driver: local
