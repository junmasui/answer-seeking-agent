
services:
  init-frontend-volumes:
    image: 'debian:12.8-slim'
    # BEWARE!
    # We mount subpaths of named volumes. The subdirectories must be created
    # before the mounting container starts.
    #
    # If the 
    #
    profiles: [ init-volumes, init-volumes-cpu, frontend, all, all-cpu ]
    # No network is needed to initialize named volumes
    network_mode: none
    user: '0:0' 
    volumes:
      - local-frontend-1:/var/local-1
    entrypoint: 'bash'
    command:
      - '-c'
      # Beware that docker-compose also performs variable interpolation.
      # So we need to escape the dollar sign with $$name so that bash
      # will recieve our embedded script with $name. 
      - |
        set -eux ;

        for VOL in '/var/local-1' ;
        do
          chmod a+rwx $$VOL

          for SUBDIR in home node_modules ;
          do
            [ -d $$VOL/$$SUBDIR ] || mkdir $$VOL/$$SUBDIR
          done

          chown -R 1000:1000 $$VOL
          chmod -R a+rwx $$VOL

          ls -la $$VOL
        done
    restart: 'no'

  vite-dev-server:
    image: 'localdomain-frontend:node-22-bookworm'
    profiles: [ frontend, all, all-cpu ]
    environment:
      # Only environment variables that are important to the Docker environment
      # will be configured here. All other environment variables are extracted
      # to .env files for easier and more isolated management.
      - CHOKIDAR_USEPOLLING=true
    #   - NODE_ENV=production
    volumes:
      # Mount the project directory to /app in the container
      - { type: bind, source: ./app, target: /app }
      # Mount important script into the container when we are
      # avoiding rebuilding images to capture their latest version.
      - { type: bind, source: ./run_dev_server.sh, target: /run_dev_server.sh }
      # Mounting a local area to use container-installed dependencies
      - type: volume
        source: local-frontend-1
        target: /home/node
        volume: { subpath: home }
      - type: volume
        source: local-frontend-1
        target: /app/node_modules
        volume: { nocopy: true, subpath: node_modules }
    ## Do not expose 5173 ... To prevent XSS (cross site scripting) usage, we want all
    ## traffic to go thru the reserve-proxy server at 15173.
    # ports:
    #   - '5173:5173'
    networks:
      - agent-poc
    user: '1000:1000'
    command: [ '/run_dev_server.sh' ]
    depends_on:
      init-frontend-volumes:
        condition: service_completed_successfully

  proxy:
    image: 'nginx:1.27.3-bookworm'
    profiles: [ frontend, all, all-cpu ]
    volumes:
      # Mount the Nginx configuration file.
      - ./nginx_default.conf:/etc/nginx/conf.d/default.conf
    ports:
      # Expose the vite server to the host machine
      - '15173:15173'
    networks:
      - agent-poc
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:15173']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s

volumes:
  local-frontend-1:
    driver: local
