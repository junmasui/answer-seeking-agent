services:
  init-backend-volumes:
    image: 'debian:12.8-slim'
    profiles: [ init-volumes, backend, all ]
    user: '0:0' 
    # No network is needed to initialize named volumes
    network_mode: none
    volumes:
      - local-backend-1:/var/.local-1
      - local-backend-2:/var/.local-2
      - local-backend-3:/var/.local-3
    entrypoint: 'bash'
    command:
      - '-c'
      # Beware that docker-compose also performs variable interpolation.
      # So we need to escape the dollar sign with $$name so that bash
      # will recieve our embedded script with $name. 
      - |
        set -eux ;

        for VOL in '/var/.local-1' '/var/.local-2' '/var/.local-3' ;
        do
          for SUBDIR in home venv staging ;
          do
            if [ ! -d $$VOL/$$SUBDIR ]
            then
              mkdir $$VOL/$$SUBDIR
              chmod a+rwx $$VOL/$$SUBDIR
              chown 1000:1000 $$VOL/$$SUBDIR
            fi
          done
          ls -la $$VOL
        done
    restart: 'no'

  fastapi-dev-server:
    image: 'localdomain-backend:python-3.12-cuda12'
    profiles: [ backend, all ]
    environment:
      # Only environment variables that are important to a Docker environment
      # will be configured here. The reason is that changes to environment variables
      # configured here do require a restart before they take effect:
      # application-centric ones should be designed to avoiid a Docker container restart.
      #
      # The Python bytecode cache should be moved away from the bind-mount because
      # there is no need for it shared with the host.
      PYTHONPYCACHEPREFIX: "/home/python/.cache/pycache"
      GPU_MODE: cuda12
    ports: # use if it is necessary to expose the container to the host machine
      - '8100:8100'
    user: '1000:1000'
    networks:
      agent-poc:
        aliases:
          - fastapi-dev-server
    entrypoint: [ 'bash', '/custom-docker-entrypoint.sh' ]
    command: [ '/run_fastapi_dev_server.sh' ]
    deploy:
      resources:
        limits:
          memory: 4G # Give enough to run local model
        # # reservations:
        # #   devices:
        # #     - driver: nvidia
        # #       count: 1
        # #       capabilities: [gpu]
    volumes:
      # Mount the project directory to /app in the container
      - { type: bind, source: ., target: /app }
      # Mount important scripts into the container when we are
      # avoiding rebuilding images to capture their latest version.
      - { type: bind, source: ./run_fastapi_dev_server.sh, target: /run_fastapi_dev_server.sh }
      - { type: bind, source: ./docker/custom-docker-entrypoint.sh, target: /custom-docker-entrypoint.sh }
      # # # Mounting a local area to use container-installed dependencies
      # # - type: volume
      # #   source: local-backend-1
      # #   target: /home/python
      # #   volume: { subpath: home }  # copy original home dir files
      # # - type: volume
      # #   source: local-backend-1
      # #   target: /app/.venv
      # #   volume: { nocopy: true, subpath: venv }
      # # - type: volume
      # #   source: local-backend-1
      # #   target: /staging
      # #   volume: { nocopy: true, subpath: staging }
    depends_on:
      init-backend-volumes:
        condition: service_completed_successfully
    healthcheck:
      # When this service start for the first time, there is multiple minutes while the
      # python environment is sync'ed to the requirements file then when the FastAPI server
      # is starting up. A health-check based on API pinging will fail during the sync and the
      # start up.
      #
      # For now, we just check if python3 can run. Later, we will  try to come up  
      ## test: ['CMD', 'curl', '-f', 'http://localhost']
      test: ['CMD', 'python3', '--version']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s




  celery-worker:
    image: 'localdomain-backend:python-3.12-cuda12'
    profiles: [ backend, all ]
    environment:
      # Only environment variables that are important to a Docker environment
      # will be configured here. The reason is that changes to environment variables
      # configured here do require a restart before they take effect:
      # application-centric ones should be designed to avoiid a Docker container restart.
      #
      # The Python bytecode cache should be moved away from the bind-mount because
      # there is no need for it shared with the host.
      PYTHONPYCACHEPREFIX: "/home/python/.cache/pycache"
      GPU_MODE: cuda12
    volumes:
      # Mount the project directory to /app in the container
      - { type: bind, source: ., target: /app }
      # Mount important scripts into the container when we are
      # avoiding rebuilding images to capture their latest version.
      - { type: bind, source: ./run_celery_worker.sh, target: /run_celery_worker.sh }
      - { type: bind, source: ./docker/custom-docker-entrypoint.sh, target: /custom-docker-entrypoint.sh }
      # # # Mounting a local area to use container-installed dependencies
      # # - type: volume
      # #   source: local-backend-2
      # #   target: /home/python
      # #   volume: { subpath: home }  # copy original home dir files
      # # - type: volume
      # #   source: local-backend-2
      # #   target: /app/.venv
      # #   volume: { nocopy: true, subpath: venv }
      # # - type: volume
      # #   source: local-backend-2
      # #   target: /staging
      # #   volume: { nocopy: true, subpath: staging }
    ports: # use if it is necessary to expose the container to the host machine
      - '8101:8101'
      - '18989:8989'
    networks:
      agent-poc:
        aliases:
          - celery-worker
    user: '1000:1000'
    entrypoint: [ 'bash', '/custom-docker-entrypoint.sh' ]
    command: [ '/run_celery_worker.sh' ]
    deploy:
      resources:
        limits:
          memory: 8G # Give enough to run Tesseract and local model
        # # reservations:
        # #   devices:
        # #     - driver: nvidia
        # #       count: 1
        # #       capabilities: [gpu]
    depends_on:
      init-backend-volumes:
        condition: service_completed_successfully
    healthcheck:
      # When this service start for the first time, there is multiple minutes while the
      # python environment is sync'ed to the requirements file then when the celery worker
      # is starting up. A health-check based on API pinging will fail during the sync and the
      # start up.
      #
      # For now, we just check if python3 can run. Later, we will  try to come up  
      ## test: ['CMD', 'curl', '-f', 'http://localhost']
      test: ['CMD', 'python3', '--version']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s



          
  celery-flower:
    image: 'localdomain-backend:python-3.12-cuda12'
    profiles: [ backend, all ]
    environment:
      # Only environment variables that are important to a Docker environment
      # will be configured here. The reason is that changes to environment variables
      # configured here do require a restart before they take effect:
      # application-centric ones should be designed to avoiid a Docker container restart.
      #
      # The Python bytecode cache should be moved away from the bind-mount because
      # there is no need for it shared with the host.
      PYTHONPYCACHEPREFIX: "/home/python/.cache/pycache"
      GPU_MODE: cuda12
    volumes:
      # Mount the project directory to /app in the container
      - { type: bind, source: ., target: /app }
      # Mount important scripts into the container when we are
      # avoiding rebuilding images to capture their latest version.
      - { type: bind, source: ./run_celery_flower.sh, target: /run_celery_flower.sh }
      - { type: bind, source: ./docker/custom-docker-entrypoint.sh, target: /custom-docker-entrypoint.sh }
      # # # Mounting a local area to use container-installed dependencies
      # # - type: volume
      # #   source: local-backend-3
      # #   target: /home/python
      # #   volume: { subpath: home }  # copy original home dir files
      # # - type: volume
      # #   source: local-backend-3
      # #   target: /app/.venv
      # #   volume: { nocopy: true, subpath: venv }
    ports: # use if it is necessary to expose the container to the host machine
      - '15555:5555'
    networks:
      agent-poc:
        aliases:
          - celery-flower
    user: '1000:1000'
    entrypoint: [ 'bash', '/custom-docker-entrypoint.sh' ]
    command: [ '/run_celery_flower.sh' ]
    depends_on:
      init-backend-volumes:
        condition: service_completed_successfully
    # # deploy:
    # #   resources:
    # #     reservations:
    # #       devices:
    # #         - driver: nvidia
    # #           count: 1
    # #           capabilities: [gpu]
    healthcheck:
      # When this service start for the first time, there is multiple minutes while the
      # python environment is sync'ed to the requirements file then when the celery flower node
      # is starting up. A health-check based on API pinging will fail during the sync and the
      # start up.
      #
      # For now, we just check if python3 can run. Later, we will  try to come up  
      ## test: ['CMD', 'curl', '-f', 'http://localhost']
      test: ['CMD', 'python3', '--version']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s

  celery-exporter:
    image: 'danihodovic/celery-exporter'
    profiles: [ backend, all ]
    environment:
      CE_BUCKETS: .005,.01,.025,.05,.1,.25,.5,1,2.5,5,10,30,60,300,600,900,1800
    command: [ '--broker-url', 'redis://agent-redis-1:6379/0' ]
    ports:
      - '19808:9808'
    networks:
      agent-poc: {}
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:9808/health']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s
      

#
# Named volumes are not created until the dependent service
# is started.
#
volumes: {}
  # local-backend-1:
  #   driver: local
  # local-backend-2:
  #   driver: local
  # local-backend-3:
  #   driver: local
